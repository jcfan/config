#!/bin/csh -f
#
#doc Get BULL_B  or BULL_A tables from USNO
#doc 
#
# Script to get BULL_B  or BULL_A tables from USNO.
# Modification to get IGS tables would be a nice feature!!!
# A modification is all needed to make it easy to link in, from local gamit/tables, 
# old versions of EOP for processing old data. (rwk 990322)
# Last modified 99/04/15 by Simon McClusky   
# Mod PT020410: add a command line option to use ncftp rather than ftp
# MOD TAH 031125: Added usnd to get finals.daily from USNO which is updated more
#     frequently than finals.data

######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 ) then
  echo "===================================================================================="
  echo " Get BULL_B or BULL_A Pole and UT1 tables.  " 
  echo "  "
  echo " There are two modes of use: "
  echo "  "
  echo " (1) Always get new tables regardless of current tables ranges (if no date entered)"
  echo " (2) Get new tables if the requested date is outside the range of the current tables"
  echo "  "
  echo " Usage: sh_update_eop -series <eops> -jd <jd> -yr <yr> -doy <doy> -perror <val> -pmax <num> -min <min> -noftp <Y/N> -ftp_prog <ftp/ncftp>"
  echo "  "
  echo "        <eops>  is pole and ut1 series to be downloaded and checked. [Required] "
  echo "                For near realtime processing use usnd which contains on recent"
  echo "                values (last 3 months) but is updated daily"
  echo "        <jd>    is julian day of data to be processed. [Optional] "
  echo "                                    OR "
  echo "        <yr & doy>  are the year and day of year of data to be processed. [Optional]"
  echo "  "      
  echo "        <num> is the maximum number of predicted values allowed [Default = 8].  The -perror"
  echo "              value is checked before applying this limit.  If <num> is increased, then perror"
  echo "              may also need to be increased" 
  echo "        <val> is the maximum predicted value error allowed (arc secs) when "  
  echo "              NOTE: pmax has precidence over perror."
  echo "        <min> update the eop file if there are fewer than min entries after"
  echo "              the date given [default 7 (also min allowed for interp.) and consistent with --pmax default]." 
  echo "        -noftp = Y Don't attempt to ftp updates, just check existing files. [Default = N]"
  echo "        -ftp_prog is the name of the ftp program e.g. ftp or ncftp [default is ftp]"
  echo "  "   
  echo "              writing predicted values into the bull_a tables. [Default 0.01] "      
  echo "  "      
  echo " Examples: sh_update_eop -series usno -yr 1998 -doy 235 -ftp_prog ncftp"
  echo "           sh_update_eop -series usno -jd 2451048 "
  echo "           sh_update_eop -series usno -perror 0.01 "
  echo "           sh_update_eop -series usno "
  echo "  "
  echo "===================================================================================="
  exit
endif 

##################### SET UP DEFAULTS #############################   
set eop_date = `echo 0 | awk '{printf" %d %d \n", $1, $1}'`
set eops = ''
set jd = ''
set year = ''
set yr = ''
set doy = ''  
set geteop = no
set perror = 0.01  
set pmax = 8 
set noftp = 'N'
set ftp_prog = 'ftp -inv'
set pre_tol = 3
set post_tol = 3

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -s*:
      set eops  = $input[2]  
    breaksw 
    case -j*:
      set jd = `echo $input[2] | awk '{printf" %d \n", $1}'`  
    breaksw 
    case -y*:
      set year = $input[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
      set yr = `sh_year -year $year`
    breaksw 
    case -d*:
      set doy = $input[2]  
    breaksw 
    case -pe*:
      set perror = $input[2]  
    breaksw 
    case -pm*:
      set pmax = $input[2]  
    breaksw 
    case -min*:
      set post_tol = $input[2]
      if ( $post_tol < 3 ) set post_tol = 3  
    breaksw 
    case -noftp:
      set noftp = $input[2]  
    breaksw 
    case -ftp_prog:
      set ftp_prog = $input[2]  
    breaksw 
  endsw
  if ( $#argv > 0 ) shift argv
end
alldone:

##################### READ THE FTP_ADDRESSES TEMPLATE ############################    
#
set ftp_info = `sh_get_ftp_info -archive usno -type eop`

while ($#ftp_info > 0 )
  set input = ( $ftp_info )
  switch($input[1])
    case -ftpsite:
      set ftpsite  = $input[2]  
    breaksw 
    case -ftplogin:
      set ftplogin  = (`echo $ftp_info | cut -d- -f2`); shift ftplogin 
    breaksw 
    case -ftpdir:
      set ftpdir  = $input[2]  
    breaksw 
    case -ftpcmd:
      set ftpcmd  = (`echo $ftp_info | cut -d% -f2`); shift ftpcmd  
    breaksw 
  endsw
  if ( $#ftp_info > 0 ) shift ftp_info
end

# The following looks to me like debug output; turn it off until Simon or Tom protests
#  -rwk 030417
#  echo "Information extracted from ftp_addresses"
# echo "########################################"
# echo "ftpsite $ftpsite"
# echo "ftplogin $ftplogin"
# echo "ftpdir $ftpdir"
# echo "ftpcmd $ftpcmd"
# echo "########################################"

##################### GET THE JOB DONE ############################
#Check required fields
if ( ${eops} == '' ) then
  echo "Required fields not complete:- series: $eops --Stop "
  exit 1
endif

# No dates given ALWAYS get new tables 
if ( $jd != '' || $year != '' ) then

# Date given as yr and doy convert to jd 
  if ( $jd == '' && $year != '' ) then
    set jd   = `doy $yr[1] $doy | tail -n -3 | head -n 1 | awk '{printf" %d \n", $8}'`
  endif

# Get the span of values in the EOP files
  if ( -e  pole.${eops} ) then
    set eop_date = `head -n 2 pole.${eops} | tail -n -1 | awk '{printf" %d %d \n", $2, $3}'`
  endif

# Add 2 and subtract 3 days from observation jd to allow for interpolation.
  set jdb = `echo $jd | awk '{printf" %d \n", ($1 - pre_tol)}' pre_tol=$pre_tol `
  set jde = `echo $jd | awk '{printf" %d \n", ($1 + post_tol)}' post_tol=$post_tol `

# Check the start and stop time of the EOP file against observations date
# Download new EOP series if out of range
  if ( $jdb <= $eop_date[1] || $jde >= $eop_date[2] ) then
    if ( $jdb <= $eop_date[1] ) then
      echo "Observations before start date of current eop series table: ${eops}"
      if ( ${noftp} != 'Y' ) then
        echo "Attempting to get new series "
        set geteop = yes
      else
        echo "-noftp = ${noftp} : Unable to get new series. Stop "
        exit -1
      endif
    else if ( $jde >= $eop_date[2] ) then
      echo "Observations after end date of current eop series table: ${eops}"
      if ( ${noftp} != 'Y' ) then
        echo "Attempting to get new series " 
        set geteop = yes 
      else
        echo "-noftp = ${noftp} : Unable to get new series. Stop "
        exit -1
      endif
    endif 
  else
    echo "Observations within the span of the current eop series table: ${eops}"
    echo "Not attempting to get new series "
  endif

# No input dates input so get new tables regardless
else if ( ${noftp} != 'Y' ) then
  set geteop = yes
else 
  echo "-noftp = ${noftp} : Unable to get new series. Stop"
endif

# Check if ncftp is requested
if ( `echo $ftp_prog | awk '{print $1}'` == 'ncftp' ) then
  if (`echo $ftpcmd | awk '{print $1}'` == 'ftp') then
    set ftpcmd = `echo $ftp_prog $ftpsite`
    echo "-ftp_prog = ncftp requested, ftpcmd now: $ftpcmd" 
  endif
endif
  
# Set up the ftp script
if (`echo $ftpcmd | awk '{print $1}'` == 'ncftp') then
  set getcmd = 'get -f -z'
  echo "binary" >! ftp.inp
else
  set getcmd = 'get'
  echo "user $ftplogin" >! ftp.inp  
  echo "binary" >> ftp.inp
endif

if($geteop == 'yes')then
  echo $getcmd finals.data from $ftpsite
  if ( -e usno.finals.data ) \rm usno.finals.data

######### The actual FTP  command is here ##########   
  echo $ftpcmd
  echo " ftping to $ftpsite ....... "  
  echo "cd $ftpdir" >> ftp.inp
  echo pwd                                    >> ftp.inp
  if ( $eops != "usnd" ) then
     echo $getcmd finals.data usno.finals.data  >> ftp.inp 
  else
     echo $getcmd finals.daily usno.finals.daily  >> ftp.inp
  endif 

  $ftpcmd < ftp.inp
endif

# Get Bulletin B is requested
if ( $eops == "bull_b" && $geteop == "yes" ) then
# read file usno.finals.data and write out pmu.${eops}
  set curr_date = `date | awk '{print $3, $2, $6, $4}'`
  set file_date = `ls -l usno.finals.data | awk '{print $5,$6,$7}'`
 
  echo '*Bulletin B values from usno.finals.data ('$file_date')' >! pmu.${eops}
# replaced by below for change in format of Bulletin B UT1-UTC values --rwk   cat usno.finals.data | awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,137,7)," 0 ",substr($0,148,7)," 0 ",substr($0,157,8)," 0 " } ' \
  cat usno.finals.data | awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,136,8)," 0 ",substr($0,147,8)," 0 ",substr($0,156,9)," 0 " } ' \
                       | awk ' {if ($6 != 0 && $8 != 0 && $10 != 0) {print $0} } ' >> pmu.${eops}  
  echo " "
  echo "Converting PMU.BULL_B to GAMIT format - files will be ut1.${eops} pole.${eops} "
  echo " "

  echo pmu.${eops}    >! erptab.inp
  echo ut1.${eops}    >> erptab.inp
  echo pole.${eops}   >> erptab.inp
  echo 'Bulletin B values from USNO finals.data ('$file_date') ' >> erptab.inp
  echo n             >> erptab.inp

# Link leap.sec to current directory
  if ( ! -e leap.sec ) ln -s ~/gg/tables/leap.sec leap.sec
  
  \rm ERPTAB.fatal >& /dev/null
  erptab < erptab.inp > /dev/null 
  if ( -e ERPTAB.fatal ) then
    cat ERPTAB.fatal 
    exit 1
  endif   
# rwk 100406: it looks like report_stat now writes messages to GAMIT.fatal  
 \rm GAMIT.fatal >& /dev/null
  erptab < erptab.inp > /dev/null 
  if ( -e GAMIT.fatal ) then
    cat GAMIT.fatal 
    exit 1
  endif
  echo "Files: ut1.${eops} and pole.${eops} created "

# Get Bulletin A is requested
else if ( ($eops == "usno" || $eops == "bull_a") && $geteop == "yes" ) then
# read file usno.finals.data and write out pmu.${eops}
  set curr_date = `date | awk '{print $3, $2, $6, $4}'`
  set file_date = `ls -l usno.finals.data | awk '{print $5,$6,$7}'`

  echo '*Bulletin A values from usno.finals.data ('$file_date')' >! pmu.${eops}.pe${perror}
# MOD TAH 030117: Changed sub-strings to exactly match format.  
  cat usno.finals.data | awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,18,10),substr($0,28,9),substr($0,37,10),substr($0,47,9),substr($0,59,10),substr($0,69,10),substr($0,17,1)}' \
                       | awk '{if (($12 != "P" || ($12 == "P" && $7 <= mpe && $9 <= mpe)) && NF == 12) {print $0} }' mpe=$perror >> pmu.${eops}.pe${perror} 

# Set maximum number of predicted values
  cat pmu.${eops}.pe${perror} | grep -v 'P$' >! pmu.${eops}.no_prediction
  cat pmu.${eops}.pe${perror} | grep 'P$' | head -n ${pmax}  >! tmp.eop_${pmax}
  cat  pmu.${eops}.no_prediction tmp.eop_${pmax} >! pmu.${eops}
  \rm tmp.eop_${pmax}

  echo " "
  echo "Maximum error of predicted values allowed in the BULL_A files is: $perror " 
  echo " "
  echo "Converting PMU.BULL_A to GAMIT format - files will be ut1.${eops} pole.${eops} "
  echo " "

  echo pmu.${eops}    >! erptab.inp
  echo ut1.${eops}    >> erptab.inp
  echo pole.${eops}   >> erptab.inp
  echo 'Bulletin A values from USNO finals.data ('$file_date') ' >> erptab.inp
  echo n             >> erptab.inp

# Link leap.sec to current directory
  if ( ! -e leap.sec ) ln -s ~/gg/tables/leap.sec leap.sec

  erptab < erptab.inp > /dev/null
 
  echo "Files: ut1.${eops} and pole.${eops} created "
  echo " "
  echo "#######################################################################"
  echo "# WARNING ut1.${eops} and pole.${eops} tables created contain predicted #"
  echo "# values. The max predicted formal sigma allowed was $perror arc sec   #"
  echo "# Search for "P" in the pmu.${eops} file to find the date where pole   #"
  echo "# UT1 predictions begin.                                              #"
  echo "#######################################################################"
  echo " "

  \rm erptab.inp

#########################################################################################
################################## Old Bull A from SOPAC ################################
#########################################################################################
#######  echo "=================================================================="#######
#######  echo "This script will get the most current ut1.usno and pole.usno"      #######
#######  echo "(Bulletin A) tables available at SIO, and place them in the "      #######
#######  echo "directory in which you are running this script.  The SIO tables"   #######
#######  echo "do not yet indicate when observed values stop and predictions "    #######
#######  echo "begin, so be careful that you don't try to use the tables without "#######
#######  echo "adjusting EOPs for high-accuracy work beyond the range of the "    #######
#######  echo "observed values."                                                  #######
#######  echo "================================================================= "#######
#######  echo " "                                                                 #######
#######  ftp -inv $ftpsopac << !                                                  #######
#######  user $sopacuser $anon_email                                              #######
#######  cd pub/processing/gamit/tables                                           #######
#######  get ut1.usno                                                             #######
#######  get pole.usno                                                            #######
#######!                                                                          #######
#######  echo " "                                                                 #######
#######  echo "New tables ut1.usno and pole.usno retrieved "                      #######
#######  echo " "                                                                 #######
#########################################################################################
#########################################################################################
#########################################################################################

# Get Bulletin A updated daily is requested. More recent values but do not go as 
# far back in time
else if ( $eops == "usnd"  && $geteop == "yes" ) then
# read file usno.finals.daily and write out pmu.${eops}
  set curr_date = `date | awk '{print $3, $2, $6, $4}'`
  set file_date = `ls -l usno.finals.daily | awk '{print $5,$6,$7}'`

  echo '*Bulletin A values from usno.finals.daily ('$file_date')' >! pmu.${eops}.pe${perror}
# MOD TAH 030117: Changed sub-strings to exactly match format.  
  cat usno.finals.daily | awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,18,10),substr($0,28,9),substr($0,37,10),substr($0,47,9),substr($0,59,10),substr($0,69,10),substr($0,17,1)}' \
                       | awk '{if (($12 != "P" || ($12 == "P" && $7 <= mpe && $9 <= mpe)) && NF == 12) {print $0} }' mpe=$perror >> pmu.${eops}.pe${perror} 

# Set maximum number of predicted values
  cat pmu.${eops}.pe${perror} | grep -v 'P$' >! pmu.${eops}.no_prediction
  cat pmu.${eops}.pe${perror} | grep 'P$' | head -n ${pmax}  >! tmp.eop_${pmax}
  cat  pmu.${eops}.no_prediction tmp.eop_${pmax} >! pmu.${eops}
  \rm tmp.eop_${pmax}

  echo " "
  echo "Maximum error of predicted values allowed in the BULL_A files is: $perror " 
  echo " "
  echo "Converting PMU.BULL_A to GAMIT format - files will be ut1.${eops} pole.${eops} "
  echo " "

  echo pmu.${eops}    >! erptab.inp
  echo ut1.${eops}    >> erptab.inp
  echo pole.${eops}   >> erptab.inp
  echo 'Bulletin A values from USNO finals.daily ('$file_date') ' >> erptab.inp
  echo n             >> erptab.inp

# Link leap.sec to current directory
  if ( ! -e leap.sec ) ln -s ~/gg/tables/leap.sec leap.sec

  erptab < erptab.inp > /dev/null
 
  echo "Files: ut1.${eops} and pole.${eops} created "
  echo " "
  echo "#######################################################################"
  echo "# WARNING ut1.${eops} and pole.${eops} tables created contain predicted #"
  echo "# values. The max predicted formal sigma allowed was $perror arc sec   #"
  echo "# Search for "P" in the pmu.${eops} file to find the date where pole   #"
  echo "# UT1 predictions begin.                                              #"
  echo "#######################################################################"
  echo " "

  \rm erptab.inp

# Requested series not available.
else if ( $geteop == "yes" ) then
  echo "Update option for ${eops}  eop series is not coded "
  echo "EOP series is out of date --Stop "
  exit 1
endif

if ( ( $jd != '' || $year != '' ) && $geteop == yes  ) then
# Check that requested date is within the range values in the new downloaded EOP files. 
  set eop_date = `head -n 2 pole.${eops} | tail -n -1 | awk '{printf" %d %d \n", $2, $3}'`

# Check again the start and stop time of the EOP file against observations date
# Stop if still out of range
  if ( $jd <= $eop_date[1] ) then
    echo "Observations before start date of eop series"
    echo "Archive files do not start before requested date --Stop"
    exit 1
  else if ( $jd >= $eop_date[2] ) then
    echo "Observations after end date of eop series"
    echo "Archive files end before requested date --Stop"
    exit 1
  endif
endif

# The end
exit
