#!/bin/csh -f 
#
#doc Update station.info using header infomation from rinex files
#doc
#
# Modified  by rwk 2002/03/11 to use single program (mstinf2) for both updates and merges
# and to use the new station.info format   
# Modified by rwk 2007/1/4 to fix bug: formerly would not update existing entries with 
# new information for the same span    


######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 ) then
  echo "===================================================================================="
  echo " Update station.info using header infomation from RINEX file " 
  echo "                           and/or"
  echo " Update station.info by merging and sorting entries from other station.info's"
  echo "  "
  echo " Usage: sh_upd_stnfo -files <files> -expt <expt> -orbt <orbt> -nosort -h <slant hgt> -ref <rsfile> -merge <sfiles> -w <outfile> "
  echo "  "
  echo "        <files> RINEX file/s to be used to update station.info. "
  echo " "  
# This option not available with mstinf2: only choices are no-update or update-if-difference
#   echo "        -u     update entry only if it is different from previous one"
#   echo "               [Optional] Default is to add new entry"
  echo "        -nosort option not to sort original station.info if known to be sorted"
  echo "               [Optional] Default is to sort station.info"
  echo " "
  echo "        <slant hgt> antenna height (m) above which the height in the rinex will be"
  echo "               as a slant height.  NOTE: Use with caution; not consistent with"
  echo "               RINEX standard and is included only for non-standard RINEX files"
  echo "        <rsfile>  Reference station.info (defines output info and format). [default station.info]"
  echo "               If not given and station.info does not exist, a new station.info file will be created with the format:"
  echo "*SITE  Station Name      Session Start      Session Stop       Ant Ht   HtCod  Ant N    Ant E    RcvCod  SwVer  AntCod" 
  echo "  "               
  echo "        <files>  station.info files to be merged  "      
  echo "        <outfile> new station.info from a merge (default station.info.new, renamed to station.info) "
  echo "  "
  echo "    Use only with old-format files: "
  echo "        <expt> 4 char experiment name used in line 1 of station.info. [Used only w/ old-style Optional]"
  echo "        <orbt> 4 char orbit name used in line 1 of station.info. [Optional]"
  echo " "                  
  echo "    NOTES:  There are three modes: "
  echo "             (1) Stand-alone to merge station.info files, one or more inputs, one output"
  echo "                  sh_upd_stnfo -ref station.info.template -merge station.info.s2 -w station.info.s3 "
  echo "                    (default output is 'station.info') "
  echo "             (2) Stand-alone to incorporate RINEX header information into station.info, one or more files"
  echo "                     (input and output files are 'station.info', continually updated) "
  echo "                  sh_upd_stnfo -f *.99o  (input and output files are station.info, continually updated) "
  echo "             (3) Within sh_gamit, adding information from one RINEX file at a time within a session"
  echo "                     (input 'station.info', output to 'station.info.new' renamed to 'station.info' "
  echo "                       if successful, origional saved as 'station.info.new') "
  echo "  "      
  echo "===================================================================================="
  exit
endif 

##################### SET UP DEFAULTS #############################   
# Setup necessary paths and filenames

set files = ''
set ref = ''
set merge = ''
set expt = ''
set orbt = ''
set unique = ''
set nosort = 'false' 
set stinfotype = 'new'
set slhgt  = '0.00'
set outfile = 'station.info.new'
set mailto = `whoami`
set machine = `hostname`

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -f*:
      set files  = (`echo $argv | cut -d- -f2`); shift files
    breaksw 
    case -m*:
      set merge  = (`echo $argv | cut -d- -f2`); shift merge
    breaksw 
    case -r*:
      set ref  = $input[2]  
    breaksw 
    case -e*:
      set expt  = $input[2]  
    breaksw 
    case -o*:
      set orbt  = $input[2]  
    breaksw 
    case -u:
      set unique = " -u "
    breaksw
    case -n*:
      set nosort = 'true'
    breaksw
    case -h
       set slhgt = $input[2]
    breaksw                       
    breaksw
    case -w
       set outfile = $input[2]
    breaksw                       
  endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
##################### GET THE JOB DONE ############################     
# Set timestamp hostname variable
set ts = "`hostname`:`date +"%H%M%S"`"

echo "EXECUTING sh_upd_stnfo"

if ( ! -e guess_rcvant.dat ) ln -s ~/gg/tables/guess_rcvant.dat .
                         
# Create station.info if it does not exist and a reference file is not input    
if ( ! -e station.info && $ref == '' ) then
  echo station.info does not exist. Creating a new. 
  set ref = 'station.info' 
#station.info doesn't exist (create an empty station.info with header)
  echo "*          Gamit station.info"                >! station.info
  echo "*"                                            >> station.info
  echo "*          Generated by sh_update_stnfo: $ts" >> station.info
  echo "*"                                            >> station.info
  echo "*SITE  Station Name      Session Start      Session Stop       Ant Ht   HtCod  Ant N    Ant E    RcvCod  SwVer  AntCod" >> station.info
  #echo "*SITE  Station Name      Session Start      Session Stop       Ant Ht   HtCod  Ant N    Ant E    Receiver Type         Vers                  SwVer  Receiver SN           Antenna Type     Antenna SN" >> station.info         
endif

# Copy original station.info for safe keeping.
if ( ! -e station.info.orig ) then
  echo "Saving original station.info to station.info.orig " 
  \cp station.info station.info.orig
endif
   
# Detect whether new or old-style station.info  
grep 'TRCK SITE' station.info >! tmp.stinfo
set num = `wc tmp.stinfo` 
if( $num[1] > 0 ) then 
   set stnfotype = 'old'  
else
   set stnfotype = 'new'
endif     

# Do station.info merging first if requested.
if ( $merge[1] != '' ) then

   echo "Updating $ref using information from $merge "
   mstinf2 -f ${ref} -w ${outfile} -s ${merge} -o
   if ( -e MSTINF.warning ) then
      touch MSTINF2.problems
      cat MSTINF.warning  >> MSTINF2.problems
      \rm -r MSTINF.warning
   endif   
    
# Have a cup of coffee and let NFS complete any buffered writes.
   sleep 3

# Move new station.info into place if not explicit outfile
if( $outfile == '' || $outfile == 'station.info' ) then
#   See type of file (if it is a link then copy into link)
   set lnk = `\ls -l station.info | awk '{print substr($0,1,1)}'`
   if( $lnk == 'l' ) then
     set lfname = `\ls -l station.info | awk '{print $NF}'`
   else 
     set lfname = "station.info"         
   endif    
endif 

# If upd_stnfo ran successfully this file should be longer than 3 lines    
   if( -e station.info.new ) then 
      set num = `wc station.info.new` 
      if( $num[1] > 3 ) then
        echo Updating $lfname 
        \mv station.info.new $lfname
	set stnfotype = 'new'
#   Everything seems to have worked so now remove the original
#  (This ensures that the next run will use the current station.info)
        \rm station.info.orig >& /dev/null
      else    
        if( $stnfotype == 'old' ) then
           echo UPD_STNFO failed, restoring original $lfname   
        else
           echo MSTINF2 failed, restoring original $lfname
        endif
        \mv station.info.orig $lfname 
      endif
   endif
endif

# Loop over rinex files adding station.info entries as we go.
foreach file ( $files )
# If old-style station.info, call mstinf to sort and then upd_stnfo to add RINEX information
  if( $stnfotype == 'old' ) then
    echo "Sorting station.info into site and time order "  
# Used mstinf copying the comments and allowing overwrite. 
    if( $nosort == "false" ) then 
       mstinf -w station.info -f station.info -c -o
       if ( -e MSTINF.warning ) then
         touch MSTINF.problems
         cat MSTINF.warning  >> MSTINF.problems
         \rm -r MSTINF.warning
       endif   
    endif
    echo "Checking station.info using information in the RINEX file $file "
    upd_stnfo $file $expt $orbt $unique -h $slhgt

  else
  
# if new-style station.info, mstinf2 does both sort and adding of RINEX information
    echo "Updating station.info using information from RINEX file $file " 
    mstinf2 -f station.info -w station.info.new -r $file -o -d -n 
    if ( -e MSTINF.warning ) then
      touch MSTINF2.problems
      cat MSTINF.warning  >> MSTINF2.problems
      \rm -r MSTINF.warning
    endif   
    
# Have a cup of coffee and let NFS complete any buffered writes.
    sleep 3
  endif

# Move new station.info into place..
# See type of file (if it is a link then copy into link)
  set lnk = `\ls -l station.info | awk '{print substr($0,1,1)}'`

  if( $lnk == 'l' ) then
      set lfname = `\ls -l station.info | awk '{print $NF}'`
  else 
      set lfname = "station.info"         
  endif
             
           
# Skip the rename to station.info if the output file is explictly specified 
  if( $outfile == 'station.info.new' ) then 
#   If upd_stnfo ran successfully this file should be longer than 3 lines    
    if( -e station.info.new ) then 
      set num = `wc station.info.new` 
      if( $num[1] > 3 ) then
        echo Updating $lfname 
        \mv station.info.new $lfname
#     Everything seems to have worked so now remove the original
#    (This ensures that the next run will use the current station.info)
      \rm station.info.orig >& /dev/null
      else    
        if( $stnfotype == 'old' ) then
          echo UPD_STNFO failed, restoring original $lfname   
        else
          echo MSTINF2 failed, restoring original $lfname
       endif
       \mv station.info.orig $lfname 
      endif
    else
    if( $stnfotype == 'old' ) then
        echo UPD_STNFO failed, restoring original $lfname   
      else
        echo MSTINF2 failed, restoring original $lfname
      endif
      \mv station.info.orig $lfname 
    endif  
  endif
end

# Thats it!!
exit
