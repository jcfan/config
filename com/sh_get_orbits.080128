#!/bin/tcsh -f
#
#doc Get orbit files by day number, center and precision from ftp archives
#doc                                               
#
# Last modified 99/04/17 by Simon McClusky

######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 ) then
  echo "====================================================================================="
  echo " Get ORBIT files from SOPAC or CDDIS archives  " 
  echo "  "
  echo " Usage: sh_get_orbits -archive <archive> -yr <yr> -doy <doy> -ndays <num> -multiday " 
  echo "                      -type <type> -pre <f/r/p> -center <center> -makeg <yes/no> -maket -noacc "
  echo "                      -eop_ser <ser> -eop_pth <pth> -orbt <orbt> -ftp_prog <ftp/ncftp>  "
  echo "                      -max_fit_tol <val>"
  echo "  "
  echo " Where: <archive> Either sopac, cddis, or igscb  [Defautl sopac] "
  echo "        <yr> 4 char year of nav data requested  [Required] "
  echo "        <doy> 3 char day of year of nav data requested  [Required] " 
  echo "        <num> Number of consecutive days of data to retreive  [Default 1] "
  echo "        <multiday> Form a multiday t-file from downloaded files " 
  echo "        <type> Either sp3 or gfile (gfile from sopac only).  [Default sp3] "
  echo "        <f/r/p> The precision of the orbit requested.  [Default f] "
  echo "                  where f=final, r=rapid, p=predicted "
  echo "        <center> Name of the IGS processing center sp3 files. [Default igs] "
  echo "                 available centers igs/cod/emr/esa/gfz/jpl/ngs/sio " 
  echo "        <makeg> Convert sp3 files in GAMIT format g-files files. [Default yes] " 
  echo "        <noacc> Do not exclude satellites base on accuracy codes. [Default exclude]"
  echo "        <ser> This is the pole. and ut1. series to be use when converting "
  echo "              sp3 -> g-files. ONLY use when makeg = yes. [Default bull_b] "
  echo "        <pth> This is the path to the pole.ser and ut1.ser files [Default ~/gg/tables] " 
  echo "        <orbt> 4 char ID used in g-file name [Default 3 char center + 1 char pre. Ie igsf] "
  echo "        <ftp/ncftp> choose the ftp program to be used [default is ftp]"
  echo "        <val> maximum misfit given in meters before a satellite is removed from orbit fit" 
  echo "        makeg make a gamit g-file from downloaded SP3 file [default yes] "
  echo "        maket make a gamit t-file from downloaded SP3 file [default not to make] "
  echo "  "      
  echo " NOTE: IGS sp3 files are available in f/r/p precision from both sopac and cddis archives "      
  echo "       SIO sp3 files are available in   r/p precision ONLY from sopac archive "
  echo "       All other sp3 files are ONLY available in f precision form both cddis and sopac "      
  echo "  "      
  echo " Examples: sh_get_orbits -archive sopac -yr 1998 -doy 235 -ndays 1 -type gfile -pre r "
  echo "           sh_get_orbits -archive sopac -yr 1998 -doy 235 -ndays 1 -pre r -center sio "
  echo "           sh_get_orbits -archive cddis -yr 1998 -doy 235 -ndays 7 -ftp_prog ncftp"
  echo "  "
  echo "====================================================================================="
  exit
endif 

##################### SET UP DEFAULTS #############################   
#
# Setup necessary paths and filenames 
set year = ''
set yr = ''
set doy = ''
set site = ''
set eop_pth = ''
set eop_ser = 'bull_b'
set numd = 1
set archive = sopac
set type = sp3
set pre = f
set cent = igs
set makeg = 'yes'
set maket = ''
set orbt = ''
set use_acc = '-u'
set ftp_prog = 'ftp -inv'
set multiday = no
set multidaylist = ''
set max_fit_tol = ''

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -a*:
      set archive  = $input[2]  
    breaksw 
    case -nd*:
      set numd = $input[2] 
    breaksw 
    case -y*:
      set year = $input[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
      set yr = `sh_year -year $year`
    breaksw 
    case -d*:
      set doy = $input[2]  
    breaksw 
    case -t*:
      set type = $input[2]  
    breaksw 
    case -p*:
      set pre = $input[2]  
    breaksw 
    case -c*:
      set cent = $input[2]  
    breaksw 
    case -eop_p*:
      set eop_pth = $input[2]  
    breaksw 
    case -eop_s*:
      set eop_ser = $input[2]  
    breaksw 
    case -o*:
      set orbt = $input[2]  
    breaksw 
    case -no*:
      set use_acc = ''  
    breaksw 
    case -ftp_prog:
      set ftp_prog = $input[2]  
    breaksw 
    case -makeg:
      set makeg = $input[2] 
    breaksw 
    case -maket:
      set maket = '-t' 
    breaksw 
    case -mu*:
      set multiday = yes 
    breaksw 
    case -max_fit_tol:
      set max_fit_tol = ('-m' $input[2]) 
      echo $max_fit_tol
    breaksw 
 
 endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
##################### READ THE FTP_INFO TEMPLATE ############################    
# 
echo "ftp_info = sh_get_ftp_info -archive $archive -type $type"
set ftp_info = `sh_get_ftp_info -archive $archive -type $type`

while ($#ftp_info > 0 )
  set input = ( $ftp_info )
  switch($input[1])
    case -ftpsite:
      set ftpsite  = $input[2]  
    breaksw 
    case -ftplogin:
      set ftplogin  = (`echo $ftp_info | cut -d- -f2`); shift ftplogin 
    breaksw 
    case -ftpdir:
      set ftpdir  = $input[2]  
    breaksw 
    case -ftpcmd:
      set ftpcmd  = (`echo $ftp_info | cut -d% -f2`); shift ftpcmd  
    breaksw 
  endsw
  if ( $#ftp_info > 0 ) shift ftp_info
end

echo "Information extracted from ftp_info"
echo "########################################"
echo "ftpsite $ftpsite"
echo "ftplogin $ftplogin"
echo "ftpdir $ftpdir"
echo "ftpcmd $ftpcmd"
echo "########################################"

##################### GET THE JOB DONE ############################   

echo "Getting requested orbit files "

# Set timestamp hostname variable
set ts = "`hostname`:`date +"%H%M%S"`"

#Check required fields
if ( ${year} == '' || ${doy} == '' ) then
  echo "Required fields not complete:- yr: $year doy: $doy --Stop "
  exit
endif 

# Check if ncftp is requested
if ( `echo $ftp_prog | awk '{print $1}'` == 'ncftp' ) then
  if (`echo $ftpcmd | awk '{print $1}'` == 'ftp') then
    set ftpcmd = `echo $ftp_prog $ftpsite` 
    echo "-ftp_prog = ncftp requested, ftpcmd now: $ftpcmd" 
  endif
endif

# Set up the ftp script
if (`echo $ftpcmd | awk '{print $1}'` == 'ftp') then 
  echo "user $ftplogin" >! tmp.get.$ts  
  echo "binary" >> tmp.get.$ts
  set getcmd = 'get'
else
  echo "binary" >! tmp.get.$ts
  set getcmd = 'get -f -z'
endif

# Setup type of sp3 files to be downloaded 
if ( ${type} == sp3 ) then
  if ( $orbt == '' ) set orbt = ${cent}${pre}
  if ( ${cent} == sio ) then
    if ( ${archive} == sopac ) then
      if ( ${pre} == "r" ) then 
        set cent = ` echo ${cent} ${pre} | awk '{print substr($1,1,2)$2}'`
      else if ( ${pre} == "p" ) then
        set cent = ` echo ${cent} ${pre} | awk '{print substr($1,1,2)$2}'`
      endif
    else
      echo "${cent} files with precision ${pre} are only available from sopac archive"
      echo "Setting precision to f (final) for ${archive} archive" 
      set pre = "f"
      if ( $orbt == '' ) set orbt = ${cent}${pre}
    endif  
  else if ( ${cent} == igs ) then
    if ( ${pre} == "r" ) then 
      if ( $orbt == '' ) set orbt = ${cent}${pre}
      set cent = ` echo ${cent} ${pre} | awk '{print substr($1,1,2)$2}'`
    else if ( ${pre} == "p" ) then
      if ( $orbt == '' ) set orbt = ${cent}${pre}
      set cent = ` echo ${cent} ${pre} | awk '{print substr($1,1,2)$2}'`  
      if( ${cent} == "igp") then
        set cent2 = ` echo ${cent} u | awk '{print substr($1,1,2)$2}'`   
      endif
    endif 
  else 
    if ( ${pre} != f ) then
      echo "${cent} files are only available in f (final) precision"
      echo "Setting precision to f (final) for downloading"
      set pre = "f"
      if ( $orbt == '' ) set orbt = ${cent}${pre}
    endif
  endif  
endif

#
# Set up loop on days
@ sday = ${doy} - 1
@ count = ${numd}
 
while ( ${count} )
  set sday = `echo ${sday} |  awk '{printf "%03d \n", $1+1 }'`
  @ count = ${count} - 1

# Make 4 char GPSW number
  set gpsw = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
  set gpsd = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
#
# Now set up the script to get files
  set directory = `echo $ftpdir | sed s/"YYYY"/$yr[1]/ | sed s/"YY"/$yr[2]/ | sed s/"DDD"/${sday}/ | sed s/"SSSS"/${site}/ | sed s/"GPSW"/${gpsw}/ `
  echo "cd $directory" >> tmp.get.$ts
  if ( ${archive} == sopac ) then
    if ( ${type} == "gfile" ) then 
#     Set the g-file name to be used if not specified
#     echo 'cd /pub/combinations/'${gpsw} >> tmp.get.$ts
      if ( ${pre} == "f" ) then 
        if ( ${orbt} == '' ) set orbt = "pgga"
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
      endif
      if ( ${pre} == "r" ) then 
        if ( ${orbt} == '' ) set orbt = "pggr"
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.rap.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.rap.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.rap  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.rap  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
      endif
      if ( ${pre} == "p" ) then 
        if ( ${orbt} == '' ) set orbt = "pggp"
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.pre.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.pre.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.pre  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.pre  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
      endif
    else if ( ${type} == "sp3" ) then
#     echo 'cd /pub/products/'${gpsw} >> tmp.get.$ts
      if ( $cent != "cod" ) then         
        if (${cent} == "igp") then
          echo  $getcmd ${cent2}${gpsw}${gpsd}'_00.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts  
          echo  $getcmd ${cent2}${gpsw}${gpsd}'_12.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts  
        else
          echo  $getcmd ${cent}${gpsw}${gpsd}'.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts
        endif
      else
        echo $getcmd ${cent}${gpsw}${gpsd}'.eph.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts
      endif
    else if ( ${type} == "gfiler" ) then 
        if ( ${orbt} == '' ) set orbt = "pggr"
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.rap.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.rap.Z  g'${orbt}${yr[3]}'.'${sday}'.Z' >> tmp.get.$ts
        echo $getcmd 'gpgga'${yr[3]}'.'${sday}'.rap  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
        echo $getcmd 'gpggaa.'${sday}'.rap  g'${orbt}${yr[3]}'.'${sday} >> tmp.get.$ts
    else
      echo "Orbit type requested ${type} is not available form this archive --Stop"
      exit
    endif
  else if ( ${archive} == cddis ) then
    if ( ${type} == "sp3" ) then
#     echo 'cd /pub/gps/products/'${gpsw} >> tmp.get.$ts
      if ( $cent != "cod" ) then
        if(${cent} == "igp")then
          echo  $getcmd ${cent2}${gpsw}${gpsd}'_00.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts  
          echo  $getcmd ${cent2}${gpsw}${gpsd}'_12.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts  
        else
          echo  $getcmd ${cent}${gpsw}${gpsd}'.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts
        endif
      else
        echo $getcmd ${cent}${gpsw}${gpsd}'.eph.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts
      endif
    else
      echo "The orbit type ${type} you requeted from ${archive} is not available --Stop"
      exit
    endif
  else if ( ${archive} == igscb ) then
    if ( ${type} == "sp3" && (${cent} == "igs" || ${cent} == "igr" || ${cent} == "igp")) then
#      echo 'cd /igscb/product/'${gpsw} >> tmp.get.$ts
      echo $getcmd ${cent}${gpsw}${gpsd}'.sp3.Z' ${cent}${gpsw}${gpsd}'.sp3.Z' >> tmp.get.$ts
    else 
      if ( ${type} != "sp3" ) then
        echo "The orbit type ${type} you requeted from ${archive} is not available --Stop"
      else
        echo "The IGS center ${cent} orbit product you requeted from ${archive} is not available --Stop"
      endif
      exit
    endif
  else
    echo "The Orbits archive ${archive} you requested is not valid --Stop"
    exit
  endif
end

#This will end the ftp session
echo 'quit' >> tmp.get.$ts

set log = `date "+get_orbit_${archive}_%y%m%d:%H%M.log"` 
cat tmp.get.$ts >! $log
echo ' ' >> $log
echo '--------------------' >> $log
$ftpcmd < tmp.get.$ts | grep -v '^230' >> $log

if ( ${type} == gfile || ${type} == gfiler ) then 
#
# Now uncompress the gfiles
  grep '^get ' tmp.get.$ts | awk '{print "gunzip -f ",$NF}' >! tmp.unc.$ts
  csh tmp.unc.$ts >>& $log
else 

# Now uncompress the .sp3 files
  grep '^get ' tmp.get.$ts | awk '{print "gunzip -f ",$NF}' >! tmp.unc.$ts
  csh tmp.unc.$ts >>& $log 
  if ( ${makeg} == yes ) then
# Make links to necessary tables files to run sh_sp3fit..
    links.arc J2000 ${yr[1]} ${eop_ser} >& /dev/null
    if ( $eop_pth != '' ) then
      \rm pole. ut1.
      ln -s ${eop_pth}/pole.${eop_ser} pole.
      ln -s ${eop_pth}/ut1.${eop_ser} ut1.
    endif

# Now convert .sp3 file for requested day into gamit g-file
# Loop over downloaded sp3 files
    @ sday = ${doy} - 1
    @ count = ${numd}
    while ( ${count} )
      set sday = `echo ${sday} |  awk '{printf "%03d \n", $1+1 }'`
      @ count = ${count} - 1
      set gpsw = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
      set gpsd = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
      if ( -e  ${cent}${gpsw}${gpsd}.sp3 ) then
        if ( $multiday == no ) then
          echo "sh_sp3fit -f ${cent}${gpsw}${gpsd}.sp3 -o ${orbt} $use_acc -d ${yr[1]} ${sday} $maket $max_fit_tol"
          sh_sp3fit -f ${cent}${gpsw}${gpsd}.sp3 -o ${orbt} $use_acc -d ${yr[1]} ${sday} $maket $max_fit_tol
        else 
          set multidaylist = ($multidaylist ${cent}${gpsw}${gpsd}.sp3)  
        endif 
      else
        echo "Requested IGS file doesn't exist --Stop " ${cent}${gpsw}${gpsd}.sp3
        stop
      endif
    end
    if ( $multiday == yes ) then 
      echo "sh_sp3fit -f $multidaylist -o ${orbt} $use_acc -d ${yr[1]} ${doy} ${sday} $maket $max_fit_tol"
      sh_sp3fit -f $multidaylist -o ${orbt} $use_acc -d ${yr[1]} ${doy} ${sday} $maket $max_fit_tol
    endif

# Remove some junk created by sh_sp3fit
    \rm y${cent}*.sp3 g${cent}*.sp3 t${cent}*.sp3 tfile.* t?????.tmp trot* arc.* orbfit.* NGS* GAMIT* ORBFIT*
  endif
endif 

#Clean up
\rm tmp.get.$ts tmp.unc.$ts

# Thats all.
exit
