#!/bin/csh -f
#
#doc Pre-process required GAMIT input files. (Used by sh_gamit)
#doc
#
######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 || ` echo $1 | cut -c2-` == 'help' ) then
  echo "=================================================================================="
  echo "  "
  echo " sh_preproc is a script to automate GAMIT/GLOBK setup " 
  echo "  "
  echo " Usage: sh_preproc -ydoy <yr> <doy> -nav <nav> -expt <expt> -orbt <orbt> " 
  echo "                   -sint <sint> -nepc <nepc> -stime <shour> <smin> -remakex <Y/C/N> "
  echo "                   -remakek <Y/C> -remakej <Y/N> -xsite <list> -xver <char> -cmdfile <file> "
  echo "  "                                                                            
  echo " Where: "
  echo "  "
  echo " ydoy   is the 4 digit year and 3 digit day of year [Required]"
  echo " nav    is the name of the RINEX navfile [Required]"
  echo " expt   is the 4 char experiment ID. [Required]"
  echo " orbt   is the 4 char orbit ID. [Required]"
  echo " sint   is the sampling interval to process (secs). [Required]"
  echo " nepc   is the number of epochs to process. [Required]"
  echo " shour smin are the start time of the processing (hr min). [Required]"
  echo " -remakex options are Y/C/N:"
  echo "        Y - remove existing x-files and session.info (No checking)"
  echo "        C - check x-files satellite and session info wrt. g-files and session.info." 
  echo "            Remove and remake x-files if any mismatch AND RINEX files are available"
  echo "            to rebuild x-files. [default]"
  echo "        N - Don't remake x-files under any circumstances."     
  echo " -remakek options are Y/C/N:"
  echo "        Y - remove existing k-files and remake "
  echo "        C - do not remake k-files unless missing or X-files are remade (default)"
  echo "        N - do not remake k-files -  stop if missing"   
  echo " -remakej options are Y/N:"  
  echo "        Y - remove existing j-file and remake from navigation file"  
  echo "        N - use existing j-file (necessary if j-file is made from C-files for SA with sampling offsets"
  echo " xsite  is a list of sites to be excluded form the dfile."
  echo " xver   1-character x-file version (6th character of x-file). [Default is single-digit year]"
  echo " file   name of the file containing the sh_gamit command line arguments"
  echo "  "                                                                           
  echo " Example: sh_preproc -ydoy 98 240 -nav brdc2400.98n -expt tubi -orbt pgga -sint 30 -nepc 2880 -stime 0 0 -remakex C "
  echo "  "
  echo "==================================================================================="
  exit
endif 
##################### SET UP DEFAULTS #############################   
# Set options which may not be in command-line or process.defaults:
set year = ''
set yr = ''
set stinf_unique = ' '
set stinf_nosort = ' '
set stinf_slthgt = ' '
set use_rxc = 'N'
set globalrx = ''
set rawlst   =  ''
set not_globalrx = ''
set not_rawlst   =  ''
set stinfo_excld = ''
set do_makexp = 'N'
set remakex = 'C'  
set remakek = 'C'
set remakej = 'Y'
set xsite = ''
set xver = ''
set cmdfile = 'tmp.cmds'
unalias ls

######## GET SAVED COMMAND FILE NAME FROM COMMANDLINE IF GIVEN  #########   
set argv_save = `echo $argv`
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -cmdfile: 
        set cmdfile =  $argv[2] 
    breaksw  
  endsw
  if ( $#argv > 0 ) shift argv
end
set argv = `echo $argv_save`

# Setup necessary paths and filenames
source ${procdir}/tables/process.defaults  

# Reset commandline options.
source ${cpth}/${cmdfile}

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -ydoy:
        set year = $argv[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
        set yr = `sh_year -year $year`
        set doy = $argv[3]
        breaksw
    case -nav:
        set nav = $argv[2]
        breaksw
    case -orbt:
        set orbt = $argv[2]
        breaksw
    case -expt:
        set expt = $argv[2]
        breaksw
    case -remakex:
        set remakex = $argv[2]
        breaksw   
    case -remakek:
        set remakek = $argv[2]
        breaksw
    case -remakej:
        set remakej = $argv[2]
        breaksw
    case -sint:
        set sint = $argv[2]
        breaksw
    case -nepc:
        set nepc = $argv[2]
        breaksw
    case -stime:
        set shr =  `echo $argv[2] | awk '{printf "%02d \n",$1}'`
        set smin = `echo $argv[3] | awk '{printf "%02d \n",$1}'`
        breaksw
    case -xsi*:
        set xsite =  (`echo $argv | cut -d- -f2`); shift xsite 
    breaksw
    case -xver
        set xver = $argv[2]  
    breaksw
    endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
##################### GET THE JOB DONE ############################
set x_exptnou = ( `sh_get_defaults -token ftprnx -expt $expt -yr $yr[1] -doy $doy` `sh_get_defaults -token localrx -expt $expt -yr $yr[1] -doy $doy` )
# MOD TAH 020816: Since a site may have both ftprnx and localrx set, the list above can have duplicates
# so echo the list and sort the unique values.
set x_expt = `echo $x_exptnou | tr ' ' '\n' | sort -u`
echo 'Non-unique x-files list: ' $x_exptnou
# This is only the list of sites that appears in sites.default.
echo 'Unique sorted x-files list:    ' $x_expt

# Now get the list of sites that is explicitly excluded by use of the expt token
set excluderx = `sh_get_defaults -expt $expt -not -yr $yr[1] -doy $doy`
echo 'Excluderx: ' $excluderx
set globalrx = `sh_get_defaults -token ftprnx -expt $expt -yr $yr[1] -doy $doy`
set not_globalrx = `sh_get_defaults -token ftprnx -expt $expt -not -yr $yr[1] -doy $doy`
# PT040115: also need to add the localrx sites NOT in the experiment given
set not_localrx  = `sh_get_defaults -token localrx -expt $expt -not -yr $yr[1] -doy $doy`
set rawlst = `sh_get_defaults -token ftpraw -expt $expt -yr $yr[1] -doy $doy`
set not_rawlst = `sh_get_defaults -token ftpraw -expt $expt -not -yr $yr[1] -doy $doy` 
#set stinfo_excld = `sh_get_defaults -token xstinfo -expt $expt`
#MOD TAH 020816: If a site is be excluded from station.info then it does not matter
# if it is in the experiment being processed.  Exclude always if it is listed this way. 
# MOD PFang/RWK: make this case insensitive (yr and day not necessary for xstinfo)
# set stinfo_excld = `sh_get_defaults -token xstinfo -yr $yr[1] -doy $doy` 
# MOD TAH 051115: Added back the -yr and -doy entries so that correct sites.defaults used.
set stinfo_excld = `sh_get_defaults -token xstinfo  -yr $yr[1] -doy $doy | tr '[A-Z]' '[a-z]'`
echo "stinfo_excld "$stinfo_excld 

# Set timestamp hostname variable
set ts = "`hostname`:`date +"%H%M%S"`"

#Check required fields
if ( ${year} == '' || ${doy} == '' || ${nav} == '' || ${expt} == '' || ${orbt} == '' ) then
  echo "Required fields not complete:- yr: $year doy: $doy nav: $nav expt: $expt orbt: $orbt --Stop "
  exit 1
endif 
      
# Set default xver if one isn't set by the user
  if ( $xver == '' ) set xver = $yr[3]
  echo "X-file version to be used is: $xver"

# Kill all x-files if requested!!!
if ( $remakex == "Y" ) then
  set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
  echo "remakex = Y, removing all x-files"
  echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null
# this shouldn't be needed and causes problems : \rm session.info >& /dev/null
endif

# See which x-files already exist.  Remove the link to the
# rinex file if the xfile exists so that makexp will not
# create a new file.    

checkx:
echo " "
echo "Checking for existing x-files "    
\ls -1 x????${xver}.${doy}* | & grep -v 'No ' | awk ' $1 != "No" {print substr($0,2,4)}' >! tmp.1.$ts   
set xf_list = `\ls -1 x????${xver}.${doy}* | & grep -v 'No ' | awk ' $1 != "No" {print substr($0,2,4)}'`
set rx_list = `\ls -1 ????????.${yr[2]}o | & grep -v 'No ' | awk ' $1 != "No" {print substr($0,1,4)}' | uniq`

# Check if rinex files available to remake ALL x-files if necessary (-remakex C )
set not_matched = '' 
foreach xfn ( $xf_list )
  set match = N
  foreach rxn ( $rx_list )
    if ( $xfn == $rxn ) set match = Y
  end
  if ( $match == "N" ) set not_matched = ($not_matched $xfn)
end  
  
echo "xf_list: $#xf_list $xf_list"        
if ( $#xf_list > 0 ) then   
# Checking session.info 
  if ( -e session.info ) then 
    set slines = `cat session.info | wc -l`
  else
    echo "Missing session.info file, creating a new one from x-file: x${xf_list[1]}${xver}.${doy} "
    set slines = 0 
    sh_uncompress x${xf_list[1]}${xver}.${doy}
    sh_xtosess -xfile x${xf_list[1]}${xver}.${doy}    
    set slines = `cat session.info | wc -l`   
  endif
  if ( $slines < 3 ) then
    echo "Short session.info file, creating a new one from x-file: x${xf_list[1]}${xver}.${doy} "
    \rm session.info  >& /dev/null
    sh_uncompress x${xf_list[1]}${xver}.${doy}
    sh_xtosess -xfile x${xf_list[1]}${xver}.${doy}
    set slines = `cat session.info | wc -l`
  endif
  echo "Session.info contains: ${slines} lines " 

  set ydoy = `tail -n +3 session.info | awk -v yr4=$yr[1] -v yr2=$yr[2] -v doy=$doy '{if (($1==yr4 || $1==yr2) && $2 == doy ) {print $0}}'`
  echo "ydoy from session.info: ${ydoy} "
# Now check to see if we found the correct session. If not, then delete session.info since it is probably not valid
# If we have a return then OK i.e., $ydoy is not blank.  If there are multiple sessions on the same day, this code will use the first.  Could be a problem.
  if( $#ydoy < 1 ) then   
    echo "Incorrect session info in session.info, creating a new one from x-file: x${xf_list[1]}${xver}.${doy}"
    echo " "
    \rm session.info >& /dev/null
    sh_uncompress x${xf_list[1]}${xver}.${doy}
    sh_xtosess -xfile x${xf_list[1]}${xver}.${doy}
  else
    set doyy = `echo $ydoy[1] $ydoy[2] | awk '{printf "%d %03d \n", $1,$2}'`
    set sinfo = `echo $ydoy[4] $ydoy[6] $ydoy[7] $ydoy[5] | awk '{printf "%d %02d %02d %d \n", $1,$2,$3,$4}'`
# This check should never fail :-) Since we check this info in the set ydoy line!!!!
    if ( ( $doyy[1] != ${yr[2]} && $doyy[1] != ${yr[1]} ) || $doyy[2] != ${doy} ) then
      echo "This check should never fail :-) Ie. I don't know how we got here."
      echo "existing session.info for ${yr[1]} ${doy} is not consistent with session.info: $doyy[1] and $doyy[2] " 
      exit 1
    endif    
    if ( $sinfo[1] != ${sint} || $sinfo[4] != ${nepc} || $sinfo[2] != ${shr} || $sinfo[3] != ${smin} ) then
      echo "Data in session.info file for ${yr[1]} ${doy} is not consistent with your input: ${sint} ${nepc} ${shr} ${smin}" 
      if ( $remakex == "C" ) then 
        if ( $#not_matched > 1 ) then
          echo "There are missing RINEX files: $not_matched" 
          echo "I am not be able to recreate all the x-file currently existing. Stopping"
          echo "If this is not a problem then rerun using the -remakex Y option. "
          exit 1
        else
          echo "All x-files have matching RINEX. Deleting old x-files "
          set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
          if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
          goto checkx
        endif
      else
        echo "If you want the x-files with you new session info: ${sint} ${nepc} ${shr} ${smin}," 
        echo " run using -remakex C or -remakex Y"
        echo "For this run we are proceeding using the old session.info values: $sinfo[1] $sinfo[4] $sinfo[2] $sinfo[3] "
      endif 
    endif
  endif   
# Check the satellites lists of satellites given in session.info, g-file and x-files 
  grep CHANNEL "x${xf_list[1]}${xver}.${doy}" | awk '{printf "%02d \n", $4}' | sort -n >! tmp.xprn 
  sed -e "1,/END/ d" g${orbt}${yr[3]}.${doy} | grep PRN | awk '{printf "%02d \n", $2}' | sort -n >! tmp.gprn  
  cat session.info | awk -v sn=${doy} '$2*1.0 == sn*1.0 {for (i=8;i<=NF;i++) {printf "%02d \n",$i}}' | sort -n >! tmp.sprn
# Make lists of satellites differences between file types. 
# sv's In session.info not in g-file
  set sng_prn = `comm -23 tmp.sprn tmp.gprn`
# sv's In in g-file not session.info
  set gns_prn = `comm -13 tmp.sprn tmp.gprn` 
# sv's In x-files not g-file
  set xng_prn = `comm -23 tmp.xprn tmp.gprn`
# sv's Inn g-file not x-files
  set gnx_prn = `comm -13 tmp.xprn tmp.gprn`
# sv's In x-files not session.info
  set xns_prn = `comm -23 tmp.xprn tmp.sprn`
# sv's In session.info not x-files
  set snx_prn = `comm -13 tmp.xprn tmp.sprn`
  if ( $#gnx_prn > 0 ) then 
    if ( $remakex == "C" ) then 
      echo "PRN: $gnx_prn in g${orbt}${yr[3]}.${doy}. NOT in x-files. Checking x-files vs rinex."
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option. "
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files"
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
        goto checkx
      endif
    else
      echo "PRN: $gnx_prn in g${orbt}${yr[3]}.${doy}. NOT in x-files. These satellites remain EXCLUDED from x-files "
      echo "If you want the x-files remade including these all available satellites, then run using -remakex C or -remakex Y "
    endif 
  endif
  if ( $#xng_prn > 0 ) then
    if ( $remakex == "C" ) then
      echo "PRN: $xng_prn in original x-files. NOT in g${orbt}${yr[3]}.${doy}."
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option."
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files "
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
       goto checkx
      endif
    else 
      echo "PRN: $xng_prn in original x-files. NOT in g${orbt}${yr[3]}.${doy}. -remakex N set so stop run. "
      exit 1
    endif
  endif
  if ( $#sng_prn > 0 ) then 
    if ( $remakex == "C" ) then 
      echo "PRN: $sng_prn in session.info. NOT g${orbt}${yr[3]}.${doy}. Checking x-files vs rinex."
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option. "
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files "
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
        goto checkx
      endif
    else
      echo "PRN: $sng_prn in original session.info. NOT in g${orbt}${yr[3]}.${doy}. -remakex N set so stop run. "
      exit 1
    endif 
  endif
  if ( $#gns_prn > 0 ) then
    if ( $remakex == "C" ) then
      echo "PRN: $gns_prn in original g${orbt}${yr[3]}.${doy}. NOT in session.info"
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option. "
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files "
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
        goto checkx
      endif
    else 
      echo "PRN: $gns_prn in g${orbt}${yr[3]}.${doy}. NOT in session.info. These satellites remain EXCLUDED from x-files "
      echo "If you want the x-files remade including these all available satellites, then run using -remakex C or -remakex Y \n"
    endif
  endif
  if ( $#xns_prn > 0 ) then 
    if ( $remakex == "C" ) then 
      echo "PRN: $xns_prn in x-files. NOT in session.info. Checking x-files vs rinex."
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option. "
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files "
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
        goto checkx
      endif
    else
      echo "PRN: $xns_prn in x-files. NOT in session.info. -remakex N set so stop run."
      exit 1
    endif 
  endif
  if ( $#snx_prn > 0 ) then
    if ( $remakex == "C" ) then
      echo "PRN: $snx_prn in session.info. NOT original x-files."
      if ( $#not_matched > 1 ) then
        echo "There are missing RINEX files: $not_matched" 
        echo "I am not be able to recreate all the x-file currently existing. Stopping"
        echo "If this is not a problem then rerun using the -remakex Y option. "
        exit 1
      else
        echo "All x-files have matching RINEX. Deleting old x-files "
        set xfiles = `\ls x????${xver}.${doy}` >& /dev/null  
        if ($#xfiles > 0 ) echo "Removing x-files: $xfiles"; \rm -r x????${xver}.${doy} >& /dev/null; \rm session.info >& /dev/null
       goto checkx
      endif
    else 
      echo "PRN: $snx_prn in  session.info. NOT original x-files. -remakex N set so stop run. "
      exit 1
    endif
  endif   

# We still have some xfiles; move the rinex file link so all xfiles are not remade...
# Check what sort of l-file your want to use (sprerical [old] or cartesian [apr]).
  set l_type = `check_lfile ${tpth}/lfile.`
  foreach site ( `cat tmp.1.$ts` )
    echo "X-file exists. Moving rinex link for site: $site"
    set rxfiles = `\ls ${site}????.${yr[2]}o` >& /dev/null
    foreach rxf ( ${rxfiles} ) 
      \mv -f ${rxf} ${rxf}.existing_x 

# Make sure that the lfile still has coordinates for this site.
      if ( $l_type == "old" ) then
        set is_in = `grep -i "^${site}" ${tpth}/lfile.`
      else
        set is_in =  `cat ${tpth}/lfile. | awk -v site=$site 'substr($0,1,1) == " " && tolower(substr($1,1,4)) == site {print $0}'`
      endif 
      if ( $#is_in == 0 ) then

#         Site is not in lfile anymore.  Get the coordinates from the
#         xfile (must have been available at some time).  NOTE: There
#         is an assumption here that the xfile has 3 blank lines that
#         are not counted by nl
          set cl = `nl x${site}${xver}.${doy}  | grep 'COORDINATE FILE INFORMATION' | awk '{print $1+6}'`
          tail -n +$cl x${site}${xver}.${doy} | head -n 1 >! t.xcd
          if ( $l_type == "old" ) then
            awk -v site=$site -v xf=x${site}${xver}.${doy} '{printf "%s %s %s Updated from %s\n", site, substr($0,2,10),substr($0,18,46), xf}' t.xcd >> ${tpth}/lfile.
          else 
            awk '{for (i=1; i<=NF; i++) printf "%s ",$i}' t.xcd >! tmp.xcrd
#           #=#=#=#= CONVERT SPHERICAL COORDS TO GEODETIC #=#=#=#=    
            tform <<ENDD  >! tmp.tformout
            2
            2
            tmp.xcrd
            4
            1
            tmp.xyz
            3
ENDD
            cat tmp.xyz | awk -v site=$site -v xf=x${site}${xver}.${doy} '{printf " %4s%s %13.3f %13.3f %13.3f %7.3f %7.3f %7.3f %7.2f Updated from %s\n", toupper(site), "_GPS", $2, $3, $4, 0.000, 0.000, 0.000, 1997.0, xf}' >> ${tpth}/lfile.
          endif
          \rm  t.xcd  >& /dev/null
      endif 
    end
  end                               

else  
# no existing x-files 
  if ( ! -e session.info ) then   
#    session.info could exist as an empty link 
     echo 'session.info missing or empty link:  remove and recreate'
     \rm session.info >& /dev/null  
  else
    set slines = `cat session.info | wc -l`
    if ( $slines < 3 ) then
      echo "Short session.info file, creating a new one from input values "
      \rm session.info  >& /dev/null
    else
      set ydoy = `tail -n +3 session.info | awk -v yr4=$yr[1] -v yr2=$yr[2] -v doy=$doy '{if (($1==yr4 || $1==yr2) && $2 == doy ) {print $0}}'`
      echo "ydoy from session.info: ${ydoy} "
#     Now check to see if we found the correct session. If not, then delete session.info since it is probably not valid
#     If we have a return then OK i.e., $ydoy is not blank.  If there are multiple sessions on the same day, this code will use the first.  Could be a problem.
      if( $#ydoy < 1 ) then   
        echo "Incorrect session info in session.info, creating a new one from input values"
        echo " "
        \rm session.info >& /dev/null  
      else
        set doyy = `echo $ydoy[1] $ydoy[2] | awk '{printf "%d %03d \n", $1,$2}'`
        set sinfo = `echo $ydoy[4] $ydoy[6] $ydoy[7] $ydoy[5] | awk '{printf "%d %02d %02d %d \n", $1,$2,$3,$4}'`
        if ( $sinfo[1] != ${sint} || $sinfo[4] != ${nepc} || $sinfo[2] != ${shr} || $sinfo[3] != ${smin} ) then
          echo "Data in session.info file for ${yr[1]} ${doy} is not consistent with your input: ${sint} ${nepc} ${shr} ${smin}" 
          echo "Remove session.info and recreate it from input values"
          \rm session.info >& /dev/null  
        endif
      endif
    endif
  endif                              
 
# End of if on existence of x-files
endif 

# If remakex set to NO move any remaining rinex files to ignored.
if ( $remakex == 'N' ) then
  set rxfiles = `\ls -1 ????????.${yr[2]}o |& grep -v 'No '` >& /dev/null
  foreach rxf ( ${rxfiles} ) 
    \mv -f ${rxf} ${rxf}.ignored
    echo "\mv -f ${rxf} ${rxf}.ignored"  
  end
endif

# Now see if any rinex files left. 
\ls -1 ????????.${yr[2]}o |& grep -v 'No ' | awk '{print substr($0,1,4)}' >! tmp.1.$ts
\ls -1 ????????.${yr[2]}o |& grep -v 'No ' | awk '{print substr($1,8,1)}' >! tmp.2.$ts
\ls -1 ????????.${yr[2]}o |& grep -v 'No ' | awk '{print substr($1,5,3)}' >! tmp.3.$ts
set numrx = `cat tmp.1.$ts | wc -l`

# Check all necessary files created in sh_preproc exist.
if ( ! -e d${expt}${yr[3]}.${doy} ) set do_makexp = "Y"
if ( ! -e l${expt}${yr[3]}.${doy} ) set do_makexp = "Y"
if ( ! -e t${orbt}${yr[3]}.${doy} ) set do_makexp = "Y"
if ( ! -e i${expt}${yr[3]}.${doy} ) set do_makexp = "Y"
if ( ! -e j${orbt}${yr[3]}.${doy} ) set do_makexp = "Y"
                

# If tmp.1 contains more than the header entry we must create some new x-files 
# If do_makexp is Y then we must run makexp to create missing files.
if ( $numrx > 0 || $do_makexp == "Y" ) then
                                                      
##### See if we need to update station.info. 
##### The updates are invoked only if you are remaking x-files (no RINEX files in tmp.1.$ts)
  echo " "
  echo "Checking if we need to update station.info from RINEX headers"
  set indx = 0 
  set sess = `cat tmp.2.$ts`
# Get list of day numbers as well
  set rxds = `cat tmp.3.$ts` 
  foreach site (`cat tmp.1.$ts`)
    @ indx = ${indx} + 1  
    set s = $sess[$indx]
#   Set the doy for this rinex file.
    set d = $rxds[$indx]
    set check_stinfo = yes 
    foreach excld ( ${stinfo_excld} )
      if ( ${excld} == ${site} || ${excld} == "all_sites" ) then
        set check_stinfo = no
      endif
    end  
 

#   Add a check to see if rinex file exists.  If x-file exists it will have been
#   moved and so no long exists.
    if ( ${check_stinfo} == yes && -e ${site}${d}${s}.${yr[2]}o ) then
#     pushd ${tpth} >& /dev/null
      if ( ! -e guess_rcvant.dat ) ln -s ../tables/guess_rcvant.dat .
      echo "Checking station.info for site: $site"
#     sh_upd_stnfo -file ${rpth}/${site}${doy}${s}.${yr[2]}o -expt $expt -orbt $orbt
      sh_upd_stnfo -file ${site}${d}${s}.${yr[2]}o -expt $expt -orbt $orbt $stinf_unique $stinf_nosort -h $stinf_slthgt
#     popd >& /dev/null
    endif
  end    


##### See if we need to update lfile. ***** Works OK, but needs more testing *****
  set daydir = `pwd`
  if ( ! -e ${tpth}/lfile. ) `echo "New approximate lfile created by sh_preproc" >! ${tpth}/lfile.`  
  set indx = 0 
# Check what sort of l-file your want to use (sprerical [old] or cartesian [apr]).
  set l_type = `check_lfile ${tpth}/lfile.`
# sess and rxds already set so no need to reset
# set sess = `cat ${daydir}/tmp.2.$ts` 
  foreach site (`cat ${daydir}/tmp.1.$ts`) 
    @ indx = ${indx} + 1  
    set s = $sess[$indx]
#   Set the day for this rinex file.
    set d = $rxds[$indx]
    if ( $l_type == "old" ) then
      set is_in = `grep -i "^${site}" ${tpth}/lfile.`
    else
      set is_in =  `cat ${tpth}/lfile. | awk 'substr($0,1,1) == " " && tolower(substr($1,1,4)) == site {print $0}' site=$site`  
    endif  
    if( $#is_in == 0 ) then
      pushd ${rpth} >& /dev/null
      set upd_lf = no
      echo "Updating lfile. Missing a priori coordinates for station: $site "
      if( $use_rxc != "Y" ) then
         foreach rxref ( ${globalrx} )
#          Note: TAH: Should be OK to use reference day RXfile since non-day files probably
#          overlap in time with the globalrx files. 
           set refok = "NO"
           set refok = `grep -i ${rxref}_gps ${tpth}/${aprf} | head -n 1 | awk -v rxref=$rxref 'toupper(substr($1,1,4)) == toupper(rxref) {print "YES"}'`
           if( -e ${rxref}${doy}0.${yr[2]}o && -e ${bpth}/brdc${doy}0.${yr[2]}n && ${upd_lf} == "no" && ${refok} == "YES" ) then 
             echo "Using sv_diff to update l-file. " 
#            Use the RXfile for the desired site on the day number that we have.
#             sh_svdiff -ref ${rxref}${doy}0.${yr[2]}o -apr ${tpth}/${aprf} -site ${site}${d}${s}.${yr[2]}o -nav ${bpth}/brdc${doy}0.${yr[2]}n
             sh_rx2apr -ref ${rxref}${doy}0.${yr[2]}o -apr ${tpth}/${aprf} -site ${site}${d}${s}.${yr[2]}o -nav ${bpth}/${brdc}${doy}0.${yr[2]}n
             if ( $l_type == "old" ) then
               head -n 2 lfile.${site} | tail -n -1  >> ${tpth}/lfile.
             else
               head -n 2 ${site}.apr | tail -n -1  >> ${tpth}/lfile.
             endif  
             set upd_lf = yes
           endif
         end
         if ( $upd_lf == "no" ) then
           echo "Couldn't find a reference site. Trying svpos to update l-file. " 
             sh_rx2apr -site ${site}${d}${s}.${yr[2]}o -nav ${bpth}/${brdc}${doy}0.${yr[2]}n
             if ( $l_type == "old" ) then
               head -n 2 lfile.${site} | tail -n -1  >> ${tpth}/lfile.
             else
               head -n 2 ${site}.apr | tail -n -1  >> ${tpth}/lfile.
             endif  
             set upd_lf = yes
         endif
      endif     


# Sh_svdiff failed update the lfile or user requested using rinex header coordinates. Use the RINEX header information...
      if ( $upd_lf == "no" ) then
        echo "Using RINEX file header to update l-file. "
        set decyr = `doy ${yr[1]} ${doy} | tail -n -1 | awk '{print $3}'`               
        echo -n " ${site}_gps " >! tmp.apr.$ts
#       TAH: Use the day number for the RXfile we have
        grep 'APPROX POSITION XYZ' ${site}${d}${s}.${yr[2]}o | awk '{print $1,$2,$3," 0.0 0.0 0.0 ",dy," From RX_Header"}' dy=$decyr >> tmp.apr.$ts
        if ( $l_type == "old" ) then
          gapr_to_l tmp.apr.$ts tmp.lf.$ts '' ${decyr} 
          tail -n +2 tmp.lf.$ts >> ${tpth}/lfile.
        else
          head -n 2 tmp.apr.$ts | tail -n -1  >> ${tpth}/lfile.
        endif  
      endif
      popd >& /dev/null
    endif 
  end   


# Check the size of the rinex files and remove any that are zero length (makex dies on these files)  
  if( $remakex != "N" ) then
    echo " "
    echo "Checking Rinex file sizes.  Zero length files will be deleted "
    set rxfiles = `\ls -1 ????????.${yr[2]}o |& grep -v 'No '`
    foreach rxf ( ${rxfiles} )
#      On some systems, a link with no file will exist and on others it
#      will not so use double check.
       if( -e $rxf ) then
          set numr = `wc $rxf`
          if( $numr[2] == 0 ) then
              echo $rxf "is zero size; deleting file"
             \rm -f $rxf >& /dev/null
          endif
       else
#         File does not exist (must be link so remove)
          \rm -f $rxf >& /dev/null
       endif
    end 
# MOD TAH 020816: Now see if we have specific exclude list.  Here we list the exclude 
# list (based on a site not appearing the correct expt code, and we delete the rinex file).
    set exists = ''
    foreach rxr ($excluderx)   
       set exists  = `\ls -1 ${rxr}????.${yr[2]}o |& grep -v 'No '`
       if (  $#exists >= 1 )  then
         echo "Removing $rxr rinex files: Listed in sites.defaults, but not used in this experiment "
         \rm ${rxr}????.${yr[2]}o >&! /dev/null
       endif
    end
  endif
# Now see if any rinex files left. 
  \ls -1 ????????.${yr[2]}o |& grep -v 'No ' | awk '{print substr($0,1,4)}' >! tmp.1.$ts
  set numrx = `cat tmp.1.$ts | wc -l`

  echo "Number of rinex file remaining to be processed into x-files is: $numrx"

# Now run makexp
  echo " "
  if ( -e session.info ) then 
#     sh_makexp -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav}                         
     echo "sh_makexp -expt $expt -orbt $orbt -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav} -xver ${xver}"
     sh_makexp -expt $expt -orbt $orbt -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav} -xver ${xver}
  else
#    sh_makexp -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav} -sinfo ${sint} ${shr} ${smin} ${nepc}
    echo "sh_makexp -expt $expt -orbt $orbt -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav} -sinfo ${sint} ${shr} ${smin} ${nepc} -xver ${xver} " 
    sh_makexp -expt $expt -orbt $orbt -yr ${yr[1]} -doy ${doy} -sess 99 -srin -nav ${nav} -sinfo ${sint} ${shr} ${smin} ${nepc} -xver ${xver}
    if ( -e  MAKEXP.fatal ) then
      echo "MAKEXP.fatal created. Check MAKEXP.fatal file to find the problem"
      cat MAKEXP.fatal
      exit 1
    endif 
  endif                                                                                                    

# Run sh_bcfit if broadcast orbits were requested 
  if ( $orbt == "brdc" ) then
    echo " "
    echo "Running sh_bcfit"  
#    old sh_bcfit replaced by new sh_bcfit (renamed from sh_bcfix) to use command-line arguments
#    sh_bcfit bctot.inp >&! /dev/null  
     sh_bcfit -f ${nav} -d ${yr[1]} ${doy}  >&! /dev/null
  endif

# Now check the session info against g-file      
  echo " " 
  echo "Running sh_check_sess on g-file g${orbt}${yr[3]}.${doy}" 
  sh_check_sess -sess ${doy} -type gfile -file g${orbt}${yr[3]}.${doy}  

# Run makej 
  if( $remakej == 'Y' ) then
    echo " " 
    echo "Running makej" 
    makej ${brdc}${doy}0.${yr[2]}n j${brdc}${yr[3]}.${doy} 
   endif

# Now check the session info against j-file 
  echo "  "
  echo "Running sh_check_sess on j-file j${brdc}${yr[3]}.${doy}" 
  sh_check_sess -sess ${doy} -type jfile -file j${brdc}${yr[3]}.${doy} 
      
# Now make the xfiles   
# Need only run makex if there are rinex files to process. Else a MAKEX.fatal will occur. 
  if ( $numrx > 0 ) then
    echo "Running makex: makex ${expt}.makex.batch ${rx_doy_minus} ${rx_doy_plus}"
    makex ${expt}.makex.batch ${rx_doy_minus} ${rx_doy_plus}
  else
    echo "  "
    echo "No need to run makex: No new rinex files were found"
  endif

# End check on RINEX files to process 
endif    

# Check d-file. Only use xfiles with size at least $minxf blocks (see defaults.)
# Make sure that the dfile exists
if( -e d${expt}${yr[3]}.${doy}  ) then
    echo " "
    echo "Updating d-file with all available x-files"  
    echo " " 
    head -n 6 d${expt}${yr[3]}.${doy} >! tmp.1.$ts
else
    echo " " 
    echo "WARNING d-file missing:" 
    echo "Creating d-file with all available x-files"
    echo " 1" >! tmp.1.$ts
    echo " 1" >> tmp.1.$ts 
    echo "l${expt}${yr[3]}.${doy}" >> tmp.1.$ts
    echo "t${orbt}${yr[3]}.${doy}" >> tmp.1.$ts
    echo "i${expt}${yr[3]}.${doy}" >> tmp.1.$ts
    echo "j${orbt}${yr[3]}.${doy}" >> tmp.1.$ts
endif
     
# Get list of all available x-files
# PT020726: only list the ones for experiment $expt
echo 0 xdummy.site >! tmp.xfsize1
# MOD TAH 020816: Since we have made only those xfiles that are needed, we can not
# just do a standard ls -1 -s on the files
foreach site ($x_expt)
  \ls -1 -s x$site${xver}.${doy} >>& tmp.xfsize1
end
# MOD TAH 040121: Uncommented ls beflow to get all x-files created in directory
\ls -s x????${xver}.${doy} >>& tmp.xfsize1
# MOD TAH 040121: added grep -vi no to remove entries with no x-files and piped
# into sort -u -k 2 to remove any duplicates that might appear because of the two
# ls calls.
cat tmp.xfsize1 | grep -v xdummy.site | grep -vi " no " | sort -u -k 2 >! tmp.xfsize

# Remove x-files from the list that are not in this network or should be excluded
echo 'List of Xfiles: not_globalrx '${not_globalrx}
echo 'List of Xfiles: not_rawlst   '${not_rawlst}
echo 'List of Xfiles: xsite        '${xsite}
echo 'List of Xfiles: not localrx  '${not_localrx}

foreach i ( ${not_globalrx} ${not_rawlst} ${xsite} ${not_localrx} )
  awk -v s=$i 'substr($2,2,4) != s {print $0}' tmp.xfsize >! tmp.xfsize1
  \mv -f tmp.xfsize1 tmp.xfsize
end      

# Write number of x-files to the d-file
set num = `cat tmp.xfsize | awk '{if ( $1*1.0 > mxf*1.0 ) print $2}' mxf=$minxf | wc`
#set num = `\ls -s x*.${doy} | awk '{if ( $1*1.0 > mxf*1.0 ) print $2}' mxf=$minxf | wc`
echo $num[1] >> tmp.1.$ts
# Write list of x-files to the d-file
cat tmp.xfsize | awk '{if ( $1*1.0  > mxf*1.0  ) print $2}' mxf=$minxf  >> tmp.1.$ts
#\ls -s x*.${doy} | awk '{if ( $1*1.0  > mxf*1.0  ) print $2}' mxf=$minxf  >> tmp.1.$ts
\mv -f tmp.1.$ts d${expt}${yr[3]}.${doy}

# Make sure that jfile exists (If we made no xfiles then this step could
# have been skipped)
            
if( ! -e j${brdc}${yr[3]}.${doy} ) then
  echo "Making "j${brdc}${yr[3]}.${doy}" from "${brdc}${doy}0.${yr[2]}n
  makej ${brdc}${doy}0.${yr[2]}n j${brdc}${yr[3]}.${doy}
endif

# Now make sure all kfiles exit.  Again if we start at x-files this may have been
# skipped or some may be missing for the current xfiles.    
if( $remakek == 'Y' ) then
  echo "Remaking k-files"  
  foreach xfile (`tail -n +8 d${expt}${yr[3]}.${doy}`)
    set kfile = `echo $xfile | awk '{print "k"substr($0,2)}'`
    echo "Making "$kfile" for "$xfile  
    makek  ${brdc}${doy}0.${yr[2]}n $xfile l${expt}${yr[3]}.${doy} 600 
  end   
#   
else
  echo "Checking that all k-files exist"
  foreach xfile (`tail -n +8 d${expt}${yr[3]}.${doy}`)
    set kfile = `echo $xfile | awk '{print "k"substr($0,2)}'`
   if( ! -e $kfile ) then 
      if( $remakek == 'C' ) then 
        echo "Making "$kfile" for "$xfile  
        makek  ${brdc}${doy}0.${yr[2]}n $xfile l${expt}${yr[3]}.${doy} 600    
#        the k-file interval reduced from 1 hr to 10 minutes to avoid bad values from TI
#        it can be increased if k-files are kept and the storage is a problem 
       else
         echo "K-file $kfile missing and -remakek" "= N -- stop" 
         exit 1
       endif
   endif
end 

#cleanup 
\rm tmp.xfsize tmp.1* tmp.2* tmp.3* tmp.sprn tmp.gprn tmp.xprn tmp.xcrd tmp.xyz t.xcd tmp.tformout >& /dev/null 

# All done
exit 0
